version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy Backend environments
          when: on_fail
          command: aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy Frontend environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migration:
    description: Revert the last migration if successfully run in the current workflow.   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl -H "token: 4148b519-c531-4bf7-9974-f4d73b474107" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm run migrations:revert
            else
              echo "No migration was done!"
              return 0
            fi

orbs:
  slack: circleci/slack@4.4.2
  
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Building Frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Building Backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Testing frontend
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Testing Backend
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
     docker:
      - image: circleci/node:13.8.0
     steps:
      - checkout
      - run:
          name: Audting Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Auditing Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Installing tar utility
          command: yum -y install tar gzip
      - run:
          name: Deploying backend infrastructure to AWS
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=UdaPeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Deploying Frontend infrastructure to AWS
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=UdaPeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_API_URL=$(aws ec2 describe-instances \
              --region us-west-2 --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID}" --output text)  
            
            curl -H "Content-Type: text/plain" -H "token: 4148b519-c531-4bf7-9974-f4d73b474107" \
              --request PUT --data "$BACKEND_API_URL" https://api.memstash.io/values/backend_api

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "06:c4:d0:27:b0:90:c4:6a:81:9a:af:b4:96:57:a2:d6"
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            curl -H "token: 4148b519-c531-4bf7-9974-f4d73b474107" --request GET https://api.memstash.io/values/ >> inventory.txt
            ansible-playbook configure-server.yml -i inventory.txt
      - revert-migration
      - destroy-environment
      
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations | tee migrations_code.txt
            export migration_code=$(cat migrations_code.txt | grep -c "has been executed successfully")
      - run:
          name: Send migration results to memstash
          command: |
            if [ $migration_code > 0 ] 
            then
              curl -H "Content-Type: text/plain" \
                  -H "token: 4148b519-c531-4bf7-9974-f4d73b474107" \
                  --request PUT --data "1" \
                  https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              else
                  echo "Migration not completed or successed"
                  exit 1
            fi   

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add curl
            apk add --no-cache --upgrade bash
            apk add --update npm
            pip3 install awscli

      - run:
          name: Get backend url
          command: |
            BACKEND_API_URL=$(curl -H "token: 4148b519-c531-4bf7-9974-f4d73b474107" --request GET https://api.memstash.io/values/backend_api)
            API_URL="http://${BACKEND_API_URL}:3030"
            echo "${API_URL}"
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build

      - run:
          name: Push the built frotend files to S3
          command: |
            aws s3 cp frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      - revert-migration
      - destroy-environment   
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "06:c4:d0:27:b0:90:c4:6a:81:9a:af:b4:96:57:a2:d6"
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add curl
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            apk add --update npm
            apk add --update zip
            pip3 install awscli
      - run:
          name: Retrive inventory file date
          command: |
            cd .circleci/ansible
            echo $(curl -H "token: 466c0b1f-7175-4686-a416-6c3f6077a725" --request GET https://api.memstash.io/values/backend_api) >> inventory.txt
      - run:
          name: Filling .env file with the required data
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Deploy backend
          command: |
            zip -r /tmp/backend.zip backend/*
            ansible-playbook \
              -i .circleci/ansible/inventory.txt \
              .circleci/ansible/deploy-backend.yml
      - revert-migration
      - destroy-environment

  smoke-test:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_API_URL=$(curl -H "token: 4148b519-c531-4bf7-9974-f4d73b474107" --request GET https://api.memstash.io/values/backend_api)
            API_URL="http://${BACKEND_API_URL}:3030"
            curl "http://${API_URL}:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      - revert-migration
      - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            curl -H "Content-Type: text/plain" -H "token: 4148b519-c531-4bf7-9974-f4d73b474107" \
            --request PUT --data "$OldWorkflowID" https://api.memstash.io/values/oldworkflow
                        curl -H "Content-Type: text/plain" -H "token: 4148b519-c531-4bf7-9974-f4d73b474107" \
            --request PUT --data "$STACKS" https://api.memstash.io/values/stacks              
            aws cloudformation create-stack \
              --template-body file://./.circleci/files/cloudfront.yml \
              --stack-name cloudfront-udapeople \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(curl -H "token: 4148b519-c531-4bf7-9974-f4d73b474107" --request GET https://api.memstash.io/values/oldworkflow)
            export STACKS=$(curl -H "token: 4148b519-c531-4bf7-9974-f4d73b474107" --request GET https://api.memstash.io/values/stacks)
            echo OldWorkflow: ${OldWorkflowID}
            echo OurCurrentWorkFlow: ${STACKS}
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              aws s3 rb s3://udapeople-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
          context: slack-context
      - scan-frontend:
          requires: [build-frontend]
          context: slack-context
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]